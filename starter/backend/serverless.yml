service: serverless-todo-app

frameworkVersion: '4.6.1'

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs18.x
  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
      TODO_TABLE: Todo-${self:provider.stage}
      FILES_TABLE: Files-${self:provider.stage}
      FILES_ID_INDEX: FilesIdIndex
      FILES_S3_BUCKET: dktest202402-todo-files-${self:provider.stage}
      SIGNED_URL_EXPIRATION: 300

  iam:
    role:
      statements:
        - Effect: Allow
          Action:           
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
        - Effect: Allow        
          Action:
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}/index/${self:provider.environment.FILES_ID_INDEX}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: arn:aws:s3:::${self:provider.environment.FILES_S3_BUCKET}/*
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource:
            - "*"

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function  - dktest - not tested
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth          
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:                    
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  # TODO: Configure this function - dktest - not tested
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: todos
          cors: true    
          request:
            schemas:
              application/json: ${file(models/create-task-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:          
          - dynamodb:PutItem          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  CreateFileRecord:
    handler: src/lambda/s3/createFileRecord.handler
    events:      
      - s3:
          bucket: ${self:provider.environment.FILES_S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
  
  # TODO: Configure this function - dktest - need test
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:                    
          - dynamodb:PutItem         
          - dynamodb:UpdateItem          
          - dynamodb:Query
        Resource:           
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"
          #request:
          #  schemas:
          #    application/json: ${file(models/create-task-request.json)}

  # TODO: Configure this function  - need test
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:                    
          - dynamodb:DeleteItem
          - dynamodb:Query
          - s3:DeleteObject    
        Resource:           
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}/index/TodoIndex
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
          - arn:aws:s3:::${self:provider.environment.FILES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: todos/{todoId}/attachment
          cors: true    
    iamRoleStatements:
      - Effect: Allow  
        Action:                                        
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - s3:PutObject
        Resource:           
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
          - arn:aws:s3:::${self:provider.environment.FILES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # TODO: Add any necessary AWS resources
    TodoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH #Partition Key from UDACITY AI
          - AttributeName: todoId
            KeyType: RANGE #Partition Key from UDACITY AI                                            
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: TodoTableIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL        
        TableName: ${self:provider.environment.TODO_TABLE}
    
    FilesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: fileId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S  
        KeySchema:
          - AttributeName: fileId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE              
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: TodoIndex
            KeySchema:
              - AttributeName: todoId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.FILES_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.FILES_S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.FILES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket